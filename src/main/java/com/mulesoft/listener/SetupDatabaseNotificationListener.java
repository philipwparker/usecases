
package com.mulesoft.listener;

import org.apache.commons.dbutils.QueryRunner;
import org.mule.api.context.notification.MuleContextNotificationListener;
import org.mule.context.notification.MuleContextNotification;
import org.mule.transport.jdbc.JdbcConnector;

public class SetupDatabaseNotificationListener
    implements MuleContextNotificationListener<MuleContextNotification>
{

    public void onNotification(MuleContextNotification notification)
    {
        if (notification.getAction() == MuleContextNotification.CONTEXT_STARTED)
        {
            JdbcConnector jdbcConnector = (JdbcConnector) notification.getMuleContext()
                .getRegistry()
                .lookupConnector("jdbcConnector");

            try
            {
                deleteTable(jdbcConnector);
            }
            catch (Exception e)
            {
                try
                {
                    createTable(jdbcConnector);
                }
                catch (Exception e1)
                {
                    e1.printStackTrace();
                }
            }

            try
            {
                populateTable(jdbcConnector);
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }

        }
    }

    protected void createTable(JdbcConnector jdbcConnector) throws Exception
    {
        QueryRunner qr = jdbcConnector.getQueryRunner();
        qr.update(
            jdbcConnector.getConnection(),
            "CREATE TABLE TicketPrices(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0)  NOT NULL PRIMARY KEY,PRICE VARCHAR(255),DESTINATION VARCHAR(255))");
          }

    protected void deleteTable(JdbcConnector jdbcConnector) throws Exception
    {
        QueryRunner qr = jdbcConnector.getQueryRunner();
        qr.update(jdbcConnector.getConnection(), "DELETE FROM TicketPrices");
    }

    protected void populateTable(JdbcConnector jdbcConnector) throws Exception
    {
        QueryRunner qr = jdbcConnector.getQueryRunner();
        int updated;
        updated = qr.update(jdbcConnector.getConnection(),
            "INSERT INTO TicketPrices(PRICE, DESTINATION) VALUES ('500', 'SFO')");
        updated = qr.update(jdbcConnector.getConnection(),
            "INSERT INTO TicketPrices(PRICE, DESTINATION) VALUES ('1200', 'MLT')");
        updated = qr.update(jdbcConnector.getConnection(),
            "INSERT INTO TicketPrices(PRICE, DESTINATION) VALUES ('600', 'BAR')");

    }

}
